#version 410
in vec4 worldNormal;
in vec4 worldPosition;
in vec2 uv;
out vec4 fragColor;

uniform float ambientAmount;
uniform vec4 cameraPos;
uniform sampler2D diffuse;

uniform int lightQuantity;
uniform vec3 lights[8];
uniform vec2 lightsInfo[8];

void main()
{
    fragColor = vec4(0, 0, 0, 1);
    float intensity = 0;
    float totalSpecular = 0;
    float distancePct = 0;
    
    // Loop through each light
    for (int i = 0; i < lightQuantity; i++)
    {
        // Calculate and add light intensity

        // Divide the light's reach and divide by distance between light and fragment, then multiply by lights intensity
        distancePct = (lightsInfo[i].y / distance(vec4(lights[i], 0), worldPosition)) * lightsInfo[i].x;

        // Get intensity of the light via normal direction, multiply by the falloff intensity value
        intensity += clamp(dot(vec4(lights[i], 1), worldNormal), 0, 1) * distancePct;
        
        // Get the uint vector from position to camera
        vec4 toCamera = normalize(worldPosition - cameraPos);
        vec4 reflection = reflect(toCamera, worldNormal);
        float specular = clamp(dot(reflection, vec4(lights[i], 1)), 0, 1);

        // Raise to power of 4 for tigher specular highlights
        specular = specular * specular;
        specular = specular * specular;

        //totalSpecular += specular;
    }

    // Lighting is now done

    // Get colour from texture
    vec4 texColor = texture(diffuse, uv);

    fragColor = texColor * intensity + vec4(totalSpecular, totalSpecular, totalSpecular, 1) + ambientAmount;
}